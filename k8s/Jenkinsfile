pipeline {
    agent any

    environment {
        // üîê Variables globales
        GROQ_API_KEY = credentials('groq_api_key')             // Jenkins Credential ID
        SONARQUBE_ENV = 'SonarQubeServer'                      // Nom de ton serveur SonarQube
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USER = 'eyadahen'                            // üîÅ Remplace par ton user Docker Hub
        IMAGE_NAME = 'groq-app'
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/EyaDahen/MLOpsInternship.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    pip install --user --upgrade pip
                    pip install --user requests groq
                '''
            }
        }

        stage('Run Groq Script') {
            steps {
                sh '''
                    echo "=== Running Groq API script ==="
                    python3 main.py
                '''
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_SCANNER_HOME = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                        ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=MLOpsProject \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "=== Building Docker Image ==="
                        docker build -t $IMAGE_NAME:$IMAGE_TAG .

                        echo "=== Tagging Docker Image for Docker Hub ==="
                        docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKERHUB_USER/$IMAGE_NAME:$IMAGE_TAG

                        echo "=== Logging into Docker Hub ==="
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

                        echo "=== Pushing Image to Docker Hub ==="
                        docker push $DOCKERHUB_USER/$IMAGE_NAME:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                sh '''
                    echo "=== Running Groq Container ==="
                    docker run --rm -e GROQ_API_KEY=$GROQ_API_KEY groq-app:latest
                '''
            }
        }

        stage('Deploy to Minikube') {
            steps {
                echo 'üöÄ D√©ploiement sur Minikube...'
                sh '''
                    eval $(minikube -p minikube docker-env)

                    # ‚úÖ D√©finir le bon fichier de config kubectl
                    export KUBECONFIG=/var/lib/jenkins/.kube/config

                    # V√©rifie que Minikube est bien accessible
                    kubectl cluster-info

                    # D√©ploie ton app
                    kubectl apply -f k8s/secret.yaml
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml

                    # Attends la fin du d√©ploiement
                    kubectl rollout status deployment/groq-app

                    # V√©rifie les pods
                    kubectl get pods -o wide
                '''
                echo '‚úÖ D√©ploiement termin√© avec succ√®s !'
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage du workspace et des conteneurs temporaires...'
            sh '''
                docker system prune -f
                docker image prune -f
            '''
            cleanWs()
        }

        success {
            echo 'üéâ Pipeline ex√©cut√© avec succ√®s !'
        }

        failure {
            echo '‚ùå √âchec du pipeline. V√©rifie les logs pour plus de d√©tails.'
        }

        unstable {
            echo '‚ö†Ô∏è Le pipeline est instable. Certaines √©tapes ont √©chou√© partiellement.'
        }
    }
}
