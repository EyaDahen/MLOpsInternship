# === main.py ===

from groq import Groq
import os
import requests

# R√©cup√©rer la cl√© API Groq depuis la variable d'environnement
groq_api_key = os.environ.get("GROQ_API_KEY")

# V√©rifier que la cl√© est disponible
if not groq_api_key:
    raise Exception("Groq API key is missing!")

# Initialiser le client Groq
groq_client = Groq(api_key=groq_api_key)

def generate_module_description(ilos, groq_api_key):
    """G√©n√®re une description professionnelle du module √† partir des ILOs (Intended Learning Outcomes)."""

    # Pr√©parer le prompt
    ilos_formatted = "\n".join(f"- {ilo}" for ilo in ilos)
    prompt = f"""
R√©digez une description professionnelle et fluide du module qui r√©sume les r√©sultats d'apprentissage sans les r√©p√©ter mot √† mot.
La description doit se concentrer sur les comp√©tences et les connaissances que les √©tudiants acquerront √† la fin du module, √©tant donn√© les r√©sultats d'apprentissage suivants :
{ilos_formatted}
"""

    # D√©finir l'URL de l'API Groq et les en-t√™tes
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {groq_api_key}",
        "Content-Type": "application/json"
    }

    # D√©finir la charge utile
    payload = {
        "model": "llama-3.1-8b-instant",
        "messages": [
            {"role": "system", "content": "Vous √™tes un assistant utile sp√©cialis√© dans la r√©daction de descriptions professionnelles de modules acad√©miques."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.2,
        "max_tokens": 300
    }

    # Envoyer la requ√™te
    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        result = response.json()
        description = result['choices'][0]['message']['content']
        return description.strip()
    else:
        raise Exception(f"√âchec de la requ√™te API Groq : {response.status_code} - {response.text}")


# === Exemple d'utilisation ===
ilos = [
    "Expliquer comment l'apprentissage par renforcement diff√®re des autres paradigmes d'apprentissage automatique.",
    "D√©crire les concepts fondamentaux de l'apprentissage par renforcement.",
    "Formuler des probl√®mes de prise de d√©cision comme des processus de d√©cision markoviens.",
    "Impl√©menter des algorithmes d'apprentissage par renforcement, y compris la programmation dynamique, les m√©thodes de Monte Carlo, l'apprentissage par diff√©rence temporelle, Q-learning et les r√©seaux de neurones Q profonds (DQN)."
]

# Appeler la fonction et afficher le r√©sultat
description = generate_module_description(ilos, groq_api_key)
print("\nüìö Description du module g√©n√©r√©e :\n")
print(description)
# === Garder le conteneur en vie ===
while True:
    time.sleep(3600)  # dort 1h et recommence, juste pour que le pod reste vivant

