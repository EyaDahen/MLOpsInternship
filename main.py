# === main.py ===
from groq import Groq
import os
import requests
import time
from prometheus_client import start_http_server, Counter, Histogram

# ====== [1] D√âFINIR LES M√âTRIQUES ======
REQUEST_COUNT = Counter('groq_requests_total', 'Total number of calls to Groq API')
REQUEST_LATENCY = Histogram('groq_request_latency_seconds', 'Latency of Groq API requests in seconds')

# ====== [2] D√âMARRER LE SERVEUR PROMETHEUS ======
port = int(os.getenv("METRICS_PORT", 8010))  # par d√©faut 8010 si non d√©fini
start_http_server(port)
print(f"üöÄ Prometheus metrics available at http://localhost:{port}/metrics")

# ====== [3] TON CODE EXISTANT ======
groq_api_key = os.environ.get("GROQ_API_KEY")

if not groq_api_key:
    raise Exception("Groq API key is missing!")

groq_client = Groq(api_key=groq_api_key)

def generate_module_description(ilos, groq_api_key):
    """G√©n√®re une description professionnelle du module √† partir des ILOs (Intended Learning Outcomes)."""

    ilos_formatted = "\n".join(f"- {ilo}" for ilo in ilos)
    prompt = f"""
R√©digez une description professionnelle et fluide du module qui r√©sume les r√©sultats d'apprentissage sans les r√©p√©ter mot √† mot.
La description doit se concentrer sur les comp√©tences et les connaissances que les √©tudiants acquerront √† la fin du module, √©tant donn√© les r√©sultats d'apprentissage suivants :
{ilos_formatted}
"""

    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {groq_api_key}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "llama-3.1-8b-instant",
        "messages": [
            {"role": "system", "content": "Vous √™tes un assistant utile sp√©cialis√© dans la r√©daction de descriptions professionnelles de modules acad√©miques."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.2,
        "max_tokens": 300
    }

    # ====== [4] MESURER LE TEMPS ET COMPTER LES REQU√äTES ======
    start_time = time.time()
    try:
        response = requests.post(url, headers=headers, json=payload)
        latency = time.time() - start_time
        REQUEST_LATENCY.observe(latency)
        REQUEST_COUNT.inc()

        if response.status_code == 200:
            result = response.json()
            description = result['choices'][0]['message']['content']
            return description.strip()
        else:
            raise Exception(f"√âchec de la requ√™te API Groq : {response.status_code} - {response.text}")

    except Exception as e:
        REQUEST_COUNT.inc()
        raise e


# === Exemple d'utilisation ===
ilos = [
    "Expliquer comment l'apprentissage par renforcement diff√®re des autres paradigmes d'apprentissage automatique.",
    "D√©crire les concepts fondamentaux de l'apprentissage par renforcement.",
    "Formuler des probl√®mes de prise de d√©cision comme des processus de d√©cision markoviens.",
    "Impl√©menter des algorithmes d'apprentissage par renforcement, y compris la programmation dynamique, les m√©thodes de Monte Carlo, l'apprentissage par diff√©rence temporelle, Q-learning et les r√©seaux de neurones Q profonds (DQN)."
]

description = generate_module_description(ilos, groq_api_key)

print("\nüìö Description du module g√©n√©r√©e :\n")
print(description)

# Si on n'est pas dans Jenkins, garder le monitoring actif
if os.environ.get("RUN_MODE", "prod") == "prod":
    print("\nüïí Monitoring actif. Appuyez sur Ctrl+C pour arr√™ter.")
    while True:
        time.sleep(10)
